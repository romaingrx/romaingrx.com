---
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';

interface Props {
  hideTitle?: boolean;
}

const { hideTitle = false } = Astro.props;

// Set to false to enable server-side form processing
// export const prerender = false;
---

<section class="container">
  <div class="mx-auto max-w-[600px] space-y-8">
    {
      !hideTitle && (
        <div class="space-y-4 text-center">
          <h2 class="text-3xl font-bold tracking-tighter sm:text-4xl">Get in Touch</h2>
          <p class="text-muted-foreground">
            Have a question or want to work together? Feel free to reach out!
          </p>
        </div>
      )
    }

    <form method="POST" class="space-y-8">
      <div class="grid gap-6">
        <div class="grid gap-2">
          <Label htmlFor="name">Name</Label>
          <Input
            id="name"
            name="name"
            placeholder="John Doe"
            required
            className="p-6 text-lg"
            aria-required="true"
            minLength={2}
          />
        </div>

        <div class="grid gap-2">
          <Label htmlFor="email">Email</Label>
          <Input
            id="email"
            name="email"
            type="email"
            placeholder="john@example.com"
            required
            className="p-6 text-lg"
            aria-required="true"
          />
        </div>

        <div class="grid gap-2">
          <Label htmlFor="message">Message</Label>
          <Textarea
            id="message"
            name="message"
            placeholder="Your message here..."
            required
            className="min-h-[200px] p-6 text-lg"
            aria-required="true"
            minLength={10}
          />
        </div>
      </div>

      <Button type="submit" size="lg" className="w-full"> Send Message </Button>
    </form>
  </div>
</section>

<script>
  import { send_feedback } from '@/lib/sentry';
  import { emptyContactForm, type ContactFormData } from '@/schemas/contact';
  import { $contactForm } from '@/stores/contact';

  // Get form elements
  const form = document.querySelector('form') as HTMLFormElement;
  const nameInput = form.querySelector('#name') as HTMLInputElement;
  const emailInput = form.querySelector('#email') as HTMLInputElement;
  const messageInput = form.querySelector('#message') as HTMLTextAreaElement;

  // Subscribe to store changes and update form
  $contactForm.subscribe((formData) => {
    nameInput.value = formData.name;
    emailInput.value = formData.email;
    messageInput.value = formData.message;
  });

  // Update store on input changes
  form.addEventListener('input', () => {
    $contactForm.set({
      name: nameInput.value,
      email: emailInput.value,
      message: messageInput.value,
    });
  });

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(form);
    // TODO romaingrx: add server side later on
    // const result = await actions.contactFormAction(Object.fromEntries(formData) as ContactFormData);
    try {
      await send_feedback(Object.fromEntries(formData) as ContactFormData);
      alert('Message sent successfully!');
      $contactForm.set(emptyContactForm);
    } catch (error) {
      alert('Error: ' + error);
    }
  });

  // Handle messages
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('success') === 'true') {
    alert('Message sent successfully!');
    window.history.replaceState({}, '', window.location.pathname);
  } else if (urlParams.get('error')) {
    alert('Error: ' + urlParams.get('error'));
    window.history.replaceState({}, '', window.location.pathname);
  }
</script>

<style>
  form {
    animation: fadeIn 0.3s ease-in-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
