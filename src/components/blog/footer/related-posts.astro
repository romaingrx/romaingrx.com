---
import { Icon } from '@iconify/react/dist/iconify.js';
import BlogCard from '@/components/blog/card/index.astro';
import { getBlogPosts, type BlogPostWithAuthors } from '@/lib/collections';

interface Props {
  post: BlogPostWithAuthors;
}

const { post } = Astro.props;

// Get all blog posts sorted by date
const allPosts = (await getBlogPosts()).sort(
  (a, b) => b.data.published_date.getTime() - a.data.published_date.getTime()
);

// Get related posts from the post data
const relatedFromData = post.data.related_posts
  ? await Promise.all(
      post.data.related_posts.map(async (ref) => {
        const posts = await getBlogPosts();
        return posts.find((p) => p.id === ref.id);
      })
    ).then((posts) => posts.filter((p): p is BlogPostWithAuthors => p !== undefined))
  : [];

// Find posts with matching tags (excluding the current post and already included related posts)
const relatedByTags = allPosts
  .filter((p) => {
    if (p.id === post.id) return false;
    if (relatedFromData.some((r) => r.id === p.id)) return false;
    return p.data.tags.some((tag) => post.data.tags.includes(tag));
  })
  .slice(0, 3 - relatedFromData.length);

// Combine both types of related posts
const relatedPosts = [...relatedFromData, ...relatedByTags];

// If no related posts, get previous and next posts
const currentIndex = allPosts.findIndex((p) => p.id === post.id);
const previousPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;
const nextPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;

// Determine which content to show
const showRelated = relatedPosts.length > 0;
---

{
  showRelated ? (
    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
      {relatedPosts.map((related) => (
        <BlogCard post={related} size="sm" />
      ))}
    </div>
  ) : (
    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {previousPost && (
        <div>
          <div class="mb-2 flex items-center gap-2 text-sm text-muted-foreground">
            <Icon icon="mdi:arrow-left" className="h-4 w-4" />
            <span>Previous Post</span>
          </div>
          <BlogCard post={previousPost} size="sm" />
        </div>
      )}
      {nextPost && (
        <div>
          <div class="mb-2 flex items-center justify-end gap-2 text-sm text-muted-foreground">
            <span>Next Post</span>
            <Icon icon="mdi:arrow-right" className="h-4 w-4" />
          </div>
          <BlogCard post={nextPost} size="sm" />
        </div>
      )}
    </div>
  )
}
