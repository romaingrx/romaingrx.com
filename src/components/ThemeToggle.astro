---
import { Icon } from 'astro-icon/components';
import { Button } from '@/components/ui/button';
---

<Button
  variant="ghost"
  size="icon"
  id="theme-toggle"
  title="Toggle theme"
  className="relative"
  transition:persist
>
  <!-- Light icon -->
  <Icon
    name={'lucide:sun'}
    class="absolute h-5 w-5 rotate-0 scale-100 transition-all theme-light:rotate-0 theme-light:scale-100 theme-dark:-rotate-90 theme-dark:scale-0 theme-system:-rotate-90 theme-system:scale-0"
  />

  <!-- Dark icon -->
  <Icon
    name={'lucide:moon'}
    class="absolute h-5 w-5 rotate-90 scale-0 transition-all theme-light:rotate-90 theme-light:scale-0 theme-dark:rotate-0 theme-dark:scale-100 theme-system:rotate-90 theme-system:scale-0"
  />

  <!-- System icon -->
  <Icon
    name={'lucide:monitor'}
    class="absolute h-5 w-5 rotate-90 scale-0 transition-all theme-light:rotate-90 theme-light:scale-0 theme-dark:rotate-90 theme-dark:scale-0 theme-system:rotate-0 theme-system:scale-100"
  />
</Button>

<script>
  type Theme = 'light' | 'dark' | 'system';

  // Function to get the stored theme preference
  const getThemePreference = (): Theme => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      const theme = localStorage.getItem('theme');
      if (theme === 'light' || theme === 'dark' || theme === 'system') {
        return theme;
      }
    }
    return 'system';
  };

  // Function to get the actual theme to apply (resolves 'system' to 'light' or 'dark')
  const getAppliedTheme = (preference: Theme): 'light' | 'dark' => {
    if (preference === 'system') {
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }
    return preference;
  };

  // Function to apply the theme
  const applyTheme = () => {
    const preference = getThemePreference();
    const appliedTheme = getAppliedTheme(preference);

    // Apply dark class based on resolved theme
    document.documentElement.classList.toggle('dark', appliedTheme === 'dark');

    // Apply data attribute for icon display
    document.documentElement.setAttribute('data-theme', preference);
  };

  // Function to handle theme toggle (cycles through: light -> dark -> system)
  const handleToggleClick = () => {
    const currentPreference = getThemePreference();
    let newPreference: Theme;

    // Cycle through themes
    if (currentPreference === 'light') {
      newPreference = 'dark';
    } else if (currentPreference === 'dark') {
      newPreference = 'system';
    } else {
      newPreference = 'light';
    }

    localStorage.setItem('theme', newPreference);
    applyTheme();
  };

  // Apply theme on initial load
  applyTheme();

  // Listen for system theme changes
  const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
  mediaQuery.addEventListener('change', () => {
    // Only react to system changes if the user has 'system' preference
    if (getThemePreference() === 'system') {
      applyTheme();
    }
  });

  // Handle click events
  document.addEventListener('astro:page-load', () => {
    const themeToggle = document.getElementById('theme-toggle');
    themeToggle?.addEventListener('click', handleToggleClick);
    applyTheme(); // Ensure theme is applied after navigation
  });

  // Apply theme immediately after view transitions
  document.addEventListener('astro:after-swap', applyTheme);
</script>
