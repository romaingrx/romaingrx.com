---
import { site } from '@/configs/site';

interface Props {
  /**
   * Optional category name to use for the comments.
   * Defaults to "Comments" if not provided.
   */
  category?: string;

  /**
   * Optional category ID to use for the comments.
   * Defaults to the main comments category ID if not provided.
   */
  categoryId?: string;

  /**
   * Optional content type label (e.g., "blog", "note").
   * Used to distinguish between different content types in GitHub Discussions.
   */
  contentType?: string;
}

const {
  category = 'Comments',
  categoryId = 'DIC_kwDOM6pBlc4Cmqh8',
  contentType = '',
} = Astro.props;

// If a content type is provided, we'll use it to create a discussion term
// that includes the content type as a prefix to the page title
const useCustomMapping = contentType !== '';
---

<script
  is:inline
  src="https://giscus.app/client.js"
  data-repo={site.repo}
  data-repo-id="R_kgDOM6pBlQ"
  data-category={category}
  data-category-id={categoryId}
  data-mapping={useCustomMapping ? 'specific' : 'og:title'}
  data-strict="0"
  data-reactions-enabled="1"
  data-emit-metadata="0"
  data-input-position="top"
  data-lang="en"
  data-loading="lazy"
  data-theme="dark"
  crossorigin="anonymous"
  async></script>

{
  useCustomMapping && (
    <script is:inline define:vars={{ contentType }}>
      {`
    // Get the page title from the og:title meta tag or document title
    function getPageTitle() {
      const ogTitleMeta = document.querySelector('meta[property="og:title"]');
      const ogTitle = ogTitleMeta ? ogTitleMeta.content : null;
      return ogTitle || document.title;
    }
    
    // Create a discussion term that includes the content type
    const discussionTerm = \`[\${contentType}] \${getPageTitle()}\`;
    
    // Set the discussion term for the specific mapping
    document.querySelector('script[src*="giscus"]').setAttribute('data-term', discussionTerm);
    `}
    </script>
  )
}

<script is:inline>
  function getTheme() {
    return document.documentElement.classList.contains('dark') ? 'dark' : 'light';
  }

  function updateGiscusTheme() {
    const theme = getTheme();
    // Update the script tag
    const giscusScript = document.querySelector('script[src*="giscus"]');
    if (giscusScript) {
      giscusScript.setAttribute('data-theme', theme);
    }

    // Update the iframe if it exists
    const iframe = document.querySelector('iframe.giscus-frame');
    if (iframe) {
      iframe.contentWindow.postMessage({ giscus: { setConfig: { theme } } }, 'https://giscus.app');
    }
  }

  // Set the initial theme on the script tag before Giscus loads
  document.querySelector('script[src*="giscus"]').setAttribute('data-theme', getTheme());

  // Watch for theme changes
  const observer = new MutationObserver(updateGiscusTheme);
  observer.observe(document.documentElement, { attributeFilter: ['class'] });

  // Setup iframe observer when the iframe is created
  function setupIframeObserver() {
    const iframe = document.querySelector('iframe.giscus-frame');
    if (iframe) {
      updateGiscusTheme(); // Ensure theme is synced when iframe appears
      const iframeObserver = new MutationObserver(updateGiscusTheme);
      iframeObserver.observe(iframe, { attributeFilter: ['data-theme'] });
    }
  }

  // Watch for iframe creation
  const iframeWatcher = new MutationObserver(mutations => {
    if (document.querySelector('iframe.giscus-frame')) {
      setupIframeObserver();
      iframeWatcher.disconnect(); // Stop watching once iframe is found
    }
  });

  iframeWatcher.observe(document.body, { childList: true, subtree: true });

  // Update theme on page navigation
  document.addEventListener('astro:page-load', () => {
    updateGiscusTheme();
  });
</script>
